#########################################################################
# 
# Fibonacci checker
#
# by Ville Kujala - 2205738 - ville.kujala@student.oulu.fi
# 
# made for TKJ 2023
# 
# 
# Pohdinta:
# 
# - Ajonaikaisten käskyjen määrä: noin 7600 / luku
# - Optimoitu mm. vähentämällä kierroksien määrää funktioissa
# - kierrosten määrän vähentäminen vähentää myös suurinta tunnistettavaa
# - lukua. Suurin tämänhetkisillä arvoilla tunnistettava on 2584.
# 
# - Kerrontafunktiossa (line 169) kierrosten määrä pudotettu
# - 64:stä kierroksesta 16:een kierrokseen. Kerrottavat luvut
# - eivät ole tässä tehtävässä tarpeeksi suuria, että tarvitsisi käydä läpi
# - kaikki 64 bittiä.
#
# - Shift Right funktiossa vähennetty kierroksien määrä (line 276)
# - 64:stä kierroksesta 32:een kierrokseen.
# - Myös bitmaskia (line 287 ja 274) on pienennetty vastaavaksi.
#
# - Sqrt -funktiossa bitin alkuarvo (line 205) muutettu suuremmaksi, jotta
# - neliöjuuri osataan laskea myös suuremmille fibonacci luvuille.
#
# - fibonacci funktiossa tallennetaan (5*x*x) arvo, jotta sitä ei
# - tarvitse laskea uudestaan.
#
# - Optimoitu myös tarkistamalla ensimmäisen perfectSquare tarkistuksen jälkeen
# - että onko tulos 1. Mikäli on niin hypätään suoraan loppuun, eikä lasketa
# - toista mahdollisuutta.
# 
# 
##########################################################################

main: 
    irmovq stack,%rbp
    irmovq stack,%rsp
    irmovq array, %r11
    
    call fibonacciArray
    halt
    
    
#######################################################
 # checks if all values in array are fibonacci numbers
 
    # r11 -> array start pos
    
#######################################################
.pos 0x100
fibonacciArray:
    pushq %r11
arrayLoop:
    popq %r11
    mrmovq (%r11), %r10 # get x from array
    irmovq $0, %rcx # 0
    subq %rcx, %r10 # if x == 0
    je arrayEnd
    
    irmovq $8, %r8 # 8
    addq %r8, %r11 # arrayPointer ++
    pushq %r11 # save arrayPointer
    
    call isFibonacci
    irmovq $0, %rcx # 0
    subq %rcx, %rax # if rax == 0
    je notFibonacci
    jmp arrayLoop
    
arrayEnd:
    irmovq $0, %rax
    ret
    
notFibonacci:
    irmovq $8, %rcx # 8
    popq %r11 # get arrayPointer
    subq %rcx, %r11 # arrayPointer to previous value
    mrmovq (%r11), %rax # return previous value
    ret
    
#########################################
 # calculates if given value is fibonacci
    
    # rax -> result (boolean)
    # r10 -> value

 # no untouched regs
#########################################
.pos 0x200
isFibonacci: # check if r10 is fibonacci
    rrmovq %r10, %r11 # value -> r11
    irmovq $5, %r12 # 5 -> r12
    call multiply # value * 5 -> rax
    rrmovq %rax, %r11 # result -> r11
    rrmovq %r10, %r12 # value -> r12
    call multiply # (value * 5) * value -> rax
    rrmovq %rax, %r13 # result -> r13   (safe reg)
    irmovq $4, %r12 # 4 -> r12
    addq %r13, %r12 # (value * 5) * value + 4 -> r12
    call isPerfectSquare
    irmovq $0, %r8
    subq %r8, %rax # if result == 1
    jne skip
    
    irmovq $-4, %r12 # -4 -> r12
    addq %r13, %r12 # (value * 5) * value + 4 -> r12
    rrmovq %rax, %r13 # perfect square bool to r13 (safe reg)
    call isPerfectSquare
    rrmovq %rax, %r14 # result -> r14
skip:
    # r13 | r14  == (r13 & r14) xor (r13 xor r14)
    rrmovq %r13, %r10 # copy of first result
    andq %r14, %r10 # and result -> r10
    xorq %r13, %r14 # xor results -> r14
    xorq %r10, %r14 # xor and result and xor result
    rrmovq %r14, %rax
    ret

#####################################
 # checks if value is perfect square

    # rax -> result
    # r12 -> value

 # untouched regs:
    # r13
#####################################
.pos 0x300
isPerfectSquare:
    rrmovq %r12, %r14 # value -> r14 (safe register)
    call sqrt # sqrt(r12) -> rcx
    rrmovq %rcx, %r11 # sqrt -> r11
    rrmovq %rcx, %r12 # sqrt -> r12
    call multiply # result * result -> rax
    subq %r14, %rax # if (sqrt * sqrt = x)
    je isSquare
    irmovq $0, %rax # not perfect square
    ret
isSquare:
    irmovq $1, %rax # perfect square
    ret

    
    
    
    
##############################    
 # multiplies two values 
 
    # rax -> result
    # r11 -> multiplicant
    # r12 -> multiplier
    
# untouhced regs:
    # rbx
    # rsi
    # rdi
    # r10
    # r13
    # r14
#############################
.pos 0x400
multiply: # r11 * r12 -> rax
    irmovq $0, %rax # result
    irmovq $16, %rcx # counter (set to 64 for 64 bit)
    irmovq $1, %rdx # 1
    irmovq $1, %r8 # bitmask
    
loop:
    subq %rdx, %rcx
    je endMultiplication
    
    rrmovq %r8, %r9 # shifted bitmask 
    andq %r12, %r9 # bit
    jne addNum
    addq %r11, %r11 # multiplicant << 1
    addq %r8, %r8 #bitmask << 1
    jmp loop
addNum:
    addq %r11, %rax # rax + multiplicant
    
    addq %r11, %r11 # multiplicant << 1
    addq %r8, %r8 #bitmask << 1
    jmp loop
    
endMultiplication:
    ret
    
#########################################    
 # calculates the square root of a value
 
    # rcx -> result
    # r12 -> value

 # untouched regs:
    # r13
    # r14
#########################################
.pos 0x500
sqrt:
    irmovq 0x1000000, %r10 # bit
    irmovq $0, %r11 # res
    rrmovq %r12,%r12 # num
    rrmovq %r12, %rax # num -> rax
    subq %r10, %rax # while (bit > num)
    jg loopWhile
    
loopBits:
    irmovq $2, %rcx # 2 -> rcx
    rrmovq %r10, %rax # bit -> rax
    call shiftRight # bit >> 2
    rrmovq %rax, %r10 # result -> bit
    rrmovq %r12, %rax # num -> rax
    subq %r10, %rax # check cond
    jl loopBits

loopWhile: # while (bit != 0)
    rrmovq %r10, %rax # bit -> rax
    irmovq $0, %rsi # just 0
    subq %rsi, %rax # bit - 0 
    je end
    addq %r11, %rax #res + bit -> rax
    rrmovq %rax, %r8 # res + bit -> r8
    rrmovq %r12, %rdx # num -> rdx
    
    subq %rax, %rdx # num - (res + bit) -> rdx
    jl else
    subq %r8, %r12 # num - (res + bit) -> num
    
    rrmovq %r11, %rax # res -> rax
    irmovq $1, %rcx # 1 -> rcx
    call shiftRight # res >> 1
    addq %r10, %rax # res + bit -> rax
    rrmovq %rax, %r11 # rax -> res
again:
    rrmovq %r10, %rax # bit -> rax
    irmovq $2, %rcx # 2 -> rcx
    call shiftRight # bit >> 2
    rrmovq %rax,%r10 #result -> bit
    jmp loopWhile
    
else:
    rrmovq %r11, %rax # res -> rax
    irmovq $1, %rcx # 1 -> rcx 
    call shiftRight # res >> 1
    rrmovq %rax, %r11 # result -> res
    jmp again
    
end:
    rrmovq %r11, %rcx
    ret

##############################    
 # shifts a value to the right
 
    # rax -> value to shift
    # rcx -> shift amount
 
 # untouhed regs:
    # rdx
    # r10
    # r11
    # r12
    # r13
    # r14
#############################
.pos 0xA00
shiftRight: # rax >> %rcx
    irmovq $0, %r8 # result
    irmovq $0x80000000, %r9 #mask (add 8 zeroes for 64bit values)
    irmovq $1, %rbx #outputMask
    irmovq $32, %rdi #counter (change to 64 for 64bit)
    subq %rcx, %rdi # counter - shiftAmount
    irmovq $1, %rsi # 1 
shiftLoop:
    subq %rsi, %rdi
    jl endShift
    andq %rax, %r9 #value & mask
    jne writeBit
    addq %r8, %r8 #result << 1
back:
    addq %rax, %rax # value << 1
    irmovq $0x80000000, %r9
    jmp shiftLoop
    
writeBit:
    addq %r8, %r8 #result << 1
    xorq %rbx, %r8 # result = outputMask | result
    jmp  back
    
endShift:
    rrmovq %r8, %rax
    ret
    
.pos 0x700
array:    
    
.pos 0x800
stack:
